service:
  name: restapi-serverless

package:
  individually: true 

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
#  - serverless-plugin-warmup
  - serverless-dynamodb-local
#  - serverless-plugin-simulate
  - serverless-offline

custom:
  serverless-offline:
    port: 3003

  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true 
      heapInitial: 200m
      heapMax: 1g
      migration: true
      seed: true

    seed:
      domain:
        sources:
          - table: serverless-todos-dev
            sources: [./offline/migrations/todos.json]

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packagerOptions:
      scripts: 
        - rm -rf node_modules/aws-sdk
  
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo API
        description: Serverless todo app 
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(src/models/validators/create-todo-request.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(src/models/validators/update-todo-request.json)}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    DEBUG: '*'
    NODE_ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TODOS_TABLE: serverless-todos-${self:provider.stage}
    ATTACHMENTS_BUCKET: attachments-url-${self:provider.stage}
    USER_ID_INDEX: userId
  tracing:
    lambda: true
    apiGateway: true

# @TODO Global IAM Roles
iamRoleStatements:
  -
    Effect: Allow
    Action:
      - xray:PutTraceSegments
      - xray:PutTelemetryRecords
    Resource:
      - "*"
  -
    Effect: Allow
    Action: [ dynamodb:Query ]
    Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
    
functions:
# @TODO Default auth0 authorizer
  Auth:
    tracing: true
    handler: src/lambda/authorization/auth0/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
# @TODO Complete custom RS256 authorizer
#  RS256:
#    handler: src/lambda/authorization/custom/rs256Auth0Authorizer.handler
#  SecondAuth:
#    handler: src/lambda/authorization/auth0/secondAuth0Authorizer.handler

# @TODO Complete get todo function
  GetTodos:
    tracing: true
    handler: src/lambda/functions/getTodos.handler
    events:
      - http:
          method: get 
          path: todos
          cors: true
          allowCredentials: true
          authorizer: Auth
    iamRoleStatementsName: get-todo-role-function
    iamRoleStatements:
      - Effect: Allow 
        Action: [ dynamodb:query ]
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow 
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
# @TODO Complete create todo function
  CreateTodo:
    tracing: true
    handler: src/lambda/functions/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          allowCredentials: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo item
            description: Create and insert item into todo table
            requestModels:
              'application/json': CreateTodoRequest
    iamRoleStatementsName: create-todo-role-function
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
      - Effect: Allow 
        Action: [ dynamodb:PutItem ]
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action: [ dynamodb:Query ]
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
# @TODO Complete updating todo function
  UpdateTodo:
    tracing: true
    handler: src/lambda/functions/updateTodo.handler
    events:
      - http:
          method: patch 
          path: todos/{todoId}
          cors: true
          allowCredentials: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new todo item
            description: Update and insert item into todo table
            requestModels:
              'application/json': UpdateTodoRequest
      - http:
          method: put 
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          allowCredentials: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new todo item
            description: Update and insert item into todo table
            requestModels:
              'application/json': UpdateTodoRequest
    iamRoleStatementsName: update-todo-role-function
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
      - Effect: Allow 
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action: [ dynamodb:Query ]
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
# @TODO Complete delete todo function
  DeleteTodo:
    tracing: true
    handler: src/lambda/functions/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          allowCredentials: true
          authorizer: Auth
    iamRoleStatementsName: delete-todo-role-function
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
      - Effect: Allow 
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action: [ dynamodb:Query ]
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
# @TODO Complete the generate uploading url section
  GenerateUploadUrl:
    handler: src/lambda/functions/generateUploadUrl.handler
    events:
      - http:
          method: post 
          path: todos/{todoId}/attachment
          cors: true 
          allowCredentials: true
          authorizer: Auth
    iamRoleStatementsName: generate-upload-url-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action: [ dynamodb:Query ]
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action: [ s3:PutObject ]
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
# All resources
resources:
  Resources:
    # Attachment Bucket created
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET 
                - PUT 
                - POST 
                - HEAD 
                - DELETE
              MaxAge: 3000
    # Create the bucket policy attached to the main bucket
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
          - Principal: '*'
            Action: 's3:GetObject'
            Effect: Allow
            Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
    # Setup Gateway Response Default 4XX
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    # Setup Request Body Validator
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true 
        ValidateRequestParameters: false
    # Setup DynamoDB table
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: todoId
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: todoId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
