service:
  name: restapi-serverless

package:
  individually: true 

plugins:
  - serverless-webpack
  - serverless-typescript
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 9000
      migrate: true
      inMemory: true
      region: us-east-1

  serverless-offline:
    host: 0.0.0.0
    port: 9001
    dontPrintOutput: true

#  datadog:
#    addLayers: true
#    logLevel: "info"
#    flushMetricsToLogs: true
#    site: datadoghq.com
#    enableXrayTracing: true
#    enableDDTracing: True

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
        - datadog-lambda-js
        - dd-trace
  
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo API
        description: Serverless todo app 
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(src/models/validators/create-todo-request.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(src/models/validators/update-todo-request.json)}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    DEBUG: '*'
    NODE_ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TODOS_TABLE: serverless-todos-${self:provider.stage}
    ATTACHMENTS_BUCKET: attachments-url-${self:provider.stage}-${self:provider.region}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0secret
  tracing:
    lambda: true
    apiGateway: true

# @TODO Global IAM Roles
iamRoleStatements:
  -
    Effect: Allow
    Action:
      - xray:PutTraceSegments
      - xray:PutTelemetryRecords
    Resource:
      - "*"
  -
    Effect: Allow
    Action:
    - secretsmanager:GetSecretValue
    Resource:
    Ref: Auth0Secret
  -
    Effect: Allow
    Action:
    - secretsmanager:GetSecretValue
    Resource: !Ref Auth0Secret
  -
    Effect: Allow
    Action:
    - kms:Decrypt
    Resource: !GetAtt KMSKey.Arn

functions:
# @TODO Complete custom RS256 authorizer
  RS256:
    tracing: true
    handler: src/lambda/authorization/custom/rs256Auth0Authorizer.handler
# @TODO Complete get todo function
  GetTodos:
    tracing: true
    handler: src/lambda/functions/getTodos.handler
    events:
      - http:
          method: get 
          path: todos
          cors: true
          allowCredentials: true
          authorizer: RS256
    iamRoleStatementsName: get-todo-role-function
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow 
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: '*'
# @TODO Complete create todo function
  CreateTodo:
    tracing: true
    handler: src/lambda/functions/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          allowCredentials: true
          authorizer: RS256
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo item
            description: Create and insert item into todo table
            requestModels:
              'application/json': CreateTodoRequest
    iamRoleStatementsName: create-todo-role-function
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
      - Effect: Allow 
        Action: [ dynamodb:PutItem ]
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: '*'
# @TODO Complete updating todo function
  UpdateTodo:
    tracing: true
    handler: src/lambda/functions/updateTodo.handler
    events:
      - http:
          method: patch 
          path: todos/{todoId}
          cors: true
          allowCredentials: true
          authorizer: RS256
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new todo item
            description: Update and insert item into todo table
            requestModels:
              'application/json': UpdateTodoRequest
      - http:
          method: put 
          path: todos/{todoId}
          cors: true
          authorizer: RS256
          allowCredentials: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new todo item
            description: Update and insert item into todo table
            requestModels:
              'application/json': UpdateTodoRequest
    iamRoleStatementsName: update-todo-role-function
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
      - Effect: Allow 
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: '*'
# @TODO Complete delete todo function
  DeleteTodo:
    tracing: true
    handler: src/lambda/functions/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          allowCredentials: true
          authorizer: RS256
    iamRoleStatementsName: delete-todo-role-function
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
      - Effect: Allow 
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: '*'
# @TODO Complete the generate uploading url section
  GenerateUploadUrl:
    tracing: true
    handler: src/lambda/functions/generateUploadUrl.handler
    events:
      - http:
          method: post 
          path: todos/{todoId}/attachment
          cors: true 
          allowCredentials: true
          authorizer: RS256
    iamRoleStatementsName: generate-upload-url-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action: [ s3:PutObject ]
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: '*'
  # @TODO Setup Elasticsearch
  SyncWithElasticsearch:
    handler: src/lambda/dynamoDB/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb 
          arn: !GetAtt TodosDynamoDBTable.StreamArn
# All resources
resources:
  Resources:
    # Attachment Bucket created
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET 
                - PUT 
                - POST 
                - HEAD 
                - DELETE
              MaxAge: 3000
    # Create the bucket policy attached to the main bucket
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
          - Principal: '*'
            Action: 's3:GetObject'
            Effect: Allow
            Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
    # Setup Gateway Response Default 4XX
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    # Setup Request Body Validator
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true 
        ValidateRequestParameters: false
    # Setup DynamoDB table
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        StreamSpecification:
          StreamViewType: NEW_IMAGE

# KMS Key
    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

# KMS Key Alias
    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

# Auth Secret Manager
    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey

# Elasticsearch image
    ImagesSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: images-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'